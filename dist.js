/*! For license information please see dist.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("source-map-support"),require("node-fetch"),require("cloudscraper")):"function"==typeof define&&define.amd?define(["source-map-support","node-fetch","cloudscraper"],t):"object"==typeof exports?exports["wstrade-api"]=t(require("source-map-support"),require("node-fetch"),require("cloudscraper")):e["wstrade-api"]=t(e._,e._,e._)}(global,((e,t,r)=>(()=>{var n={391:(e,t,r)=>{"use strict";r.d(t,{Z:()=>v});var n=r(861),o=r.n(n),s=r(156),i=r.n(s),a=r(690),u=r.n(a),c=r(728),l=r.n(c),p=r(687),h=r.n(p),f=r(726),d=99,y=["sell","deposit","withdrawal","dividend","institutional_transfer","internal_transfer","refund","referral_bonus","affiliate","buy"];const v=function(){function e(t){u()(this,e),this.worker=t}var t,r,n,s,a,c,p,v,m;return l()(e,[{key:"all",value:(m=i()(h().mark((function e(){var t;return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.worker.handleRequest(f.Z.ACCOUNT_IDS,{});case 2:return t=e.sent,e.abrupt("return",{tfsa:t.find((function(e){return e.startsWith("tfsa")})),rrsp:t.find((function(e){return e.startsWith("rrsp")})),crypto:t.find((function(e){return e.startsWith("non-registered-crypto")})),personal:t.find((function(e){return e.startsWith("non-registered")&&!e.startsWith("non-registered-crypto")}))});case 4:case"end":return e.stop()}}),e,this)}))),function(){return m.apply(this,arguments)})},{key:"data",value:(v=i()(h().mark((function e(){return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.LIST_ACCOUNT,{}));case 1:case"end":return e.stop()}}),e,this)}))),function(){return v.apply(this,arguments)})},{key:"me",value:(p=i()(h().mark((function e(){return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.ME,{}));case 1:case"end":return e.stop()}}),e,this)}))),function(){return p.apply(this,arguments)})},{key:"person",value:(c=i()(h().mark((function e(){return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.PERSON,{}));case 1:case"end":return e.stop()}}),e,this)}))),function(){return c.apply(this,arguments)})},{key:"history",value:(a=i()(h().mark((function e(t,r){return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.HISTORY_ACCOUNT,{interval:t,accountId:r}));case 1:case"end":return e.stop()}}),e,this)}))),function(e,t){return a.apply(this,arguments)})},{key:"activities",value:(s=i()(h().mark((function e(){var t,r,n,s,i,a,u,c,l,p,v=arguments;return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(null!=(i=v.length>0&&void 0!==v[0]?v[0]:{})&&i.limit&&i.limit>d)){e.next=3;break}throw new Error("filters.limit can not exceed 99! Leave filters.limit undefined if you want to retrieve all.");case 3:if(null==i||!i.accounts||Array.isArray(i.accounts)){e.next=5;break}throw new Error("filters.accounts must be an array!");case 5:if(null==i||!i.type||Array.isArray(i.type)){e.next=7;break}throw new Error("filters.type must be an array!");case 7:return a=[],e.next=10,this.worker.handleRequest(f.Z.ACTIVITIES,{limit:null!==(t=null==i?void 0:i.limit)&&void 0!==t?t:d,accountIds:null!==(r=null==i||null===(n=i.accounts)||void 0===n?void 0:n.join())&&void 0!==r?r:"",bookmark:"",type:null!==(s=null==i?void 0:i.type)&&void 0!==s?s:y});case 10:if(u=e.sent,a.push.apply(a,o()(u.results)),null!=i&&i.limit){e.next=22;break}case 13:if(a.length%d!=0){e.next=22;break}return e.next=16,this.worker.handleRequest(f.Z.ACTIVITIES,{limit:d,accountIds:null!==(c=null==i||null===(l=i.accounts)||void 0===l?void 0:l.join())&&void 0!==c?c:"",bookmark:u.bookmark,type:null!==(p=null==i?void 0:i.type)&&void 0!==p?p:y});case 16:if(0!==(u=e.sent).results.length){e.next=19;break}return e.abrupt("break",22);case 19:a.push.apply(a,o()(u.results)),e.next=13;break;case 22:return e.abrupt("return",a);case 23:case"end":return e.stop()}}),e,this)}))),function(){return s.apply(this,arguments)})},{key:"getBankAccounts",value:(n=i()(h().mark((function e(){return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.BANK_ACCOUNTS,{}));case 1:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"deposits",value:(r=i()(h().mark((function e(){return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.DEPOSITS,{}));case 1:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"positions",value:(t=i()(h().mark((function e(t){return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.POSITIONS,{accountId:t}));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),e}()},726:(e,t,r)=>{"use strict";r.d(t,{Z:()=>o});var n={onFailure:function(e){return{status:e.statusCode,reason:e.statusMessage,body:e.body,headers:e.rawHeaders}},onSuccess:function(e){return e.body}};const o={LOGIN:{method:"POST",url:"https://trade-service.wealthsimple.com/auth/login",authenticated:!1,onSuccess:function(e){return{tokens:{access:e.headers["x-access-token"],refresh:e.headers["x-refresh-token"],expires:parseInt(e.headers["x-access-token-expires"],10)},accountInfo:e.body}},onFailure:n.onFailure},REFRESH:{method:"POST",url:"https://trade-service.wealthsimple.com/auth/refresh",authenticated:!1,onSuccess:function(e){return{tokens:{access:e.headers["x-access-token"],refresh:e.headers["x-refresh-token"],expires:parseInt(e.headers["x-access-token-expires"],10)}}},onFailure:n.onFailure},ACCOUNT_IDS:{method:"GET",url:"https://trade-service.wealthsimple.com/account/list",authenticated:!0,onSuccess:function(e){return e.body.results.filter((function(e){return"open"===e.status&&!e.deleted_at})).map((function(e){return e.id}))},onFailure:n.onFailure},LIST_ACCOUNT:{method:"GET",url:"https://trade-service.wealthsimple.com/account/list",authenticated:!0,onSuccess:function(e){return e.body.results},onFailure:n.onFailure},ME:{method:"GET",url:"https://trade-service.wealthsimple.com/me",authenticated:!0,onSuccess:n.onSuccess,onFailure:n.onFailure},PERSON:{method:"GET",url:"https://trade-service.wealthsimple.com/person",authenticated:!0,onSuccess:n.onSuccess,onFailure:n.onFailure},HISTORY_ACCOUNT:{method:"GET",url:"https://trade-service.wealthsimple.com/account/history/{0}?account_id={1}",authenticated:!0,parameters:{0:"interval",1:"accountId"},onSuccess:n.onSuccess,onFailure:n.onFailure},ACTIVITIES:{method:"GET",url:"https://trade-service.wealthsimple.com/account/activities?limit={0}&account_ids={1}&[2]&bookmark={3}",authenticated:!0,parameters:{0:"limit",1:"accountIds",2:"type",3:"bookmark"},onSuccess:n.onSuccess,onFailure:n.onFailure},DEPOSITS:{method:"GET",url:"https://trade-service.wealthsimple.com/deposits",authenticated:!0,onSuccess:function(e){return e.body.results},onFailure:n.onFailure},BANK_ACCOUNTS:{method:"GET",url:"https://trade-service.wealthsimple.com/bank-accounts",authenticated:!0,onSuccess:function(e){return e.body.results},onFailure:n.onFailure},EXCHANGE_RATES:{method:"GET",url:"https://trade-service.wealthsimple.com/forex",authenticated:!0,onSuccess:n.onSuccess,onFailure:n.onFailure},SECURITY:{method:"GET",url:"https://trade-service.wealthsimple.com/securities?query={0}",authenticated:!0,parameters:{0:"ticker"},onSuccess:function(e){var t=e.body;if(0===t.results.length)throw new Error("Security does not exist");return t.results},onFailure:n.onFailure},EXTENSIVE_SECURITY_DETAILS:{method:"GET",url:"https://trade-service.wealthsimple.com/securities/{0}",authenticated:!0,parameters:{0:"id"},onSuccess:n.onSuccess,onFailure:n.onFailure},SECURITY_GROUPS:{method:"GET",url:"https://trade-service.wealthsimple.com/security-groups?limit=99",authenticated:!0,onSuccess:function(e){return e.body.results},onFailure:n.onFailure},SECURITY_GROUP:{method:"GET",url:"https://trade-service.wealthsimple.com/security-groups/{0}/securities",authenticated:!0,parameters:{0:"groupId"},onSuccess:function(e){return e.body.results},onFailure:n.onFailure},QUOTES_HISTORY:{method:"GET",url:"https://trade-service.wealthsimple.com/securities/{0}/historical_quotes/{1}?mic=XNAS",authenticated:!0,parameters:{0:"id",1:"interval"},onSuccess:n.onSuccess,onFailure:n.onFailure},POSITIONS:{method:"GET",url:"https://trade-service.wealthsimple.com/account/positions?account_id={0}",authenticated:!0,parameters:{0:"accountId"},onSuccess:function(e){return e.body.results},onFailure:n.onFailure},ORDERS_BY_PAGE:{method:"GET",url:"https://trade-service.wealthsimple.com/orders?offset={0}&account_id={1}",authenticated:!0,parameters:{0:"offset",1:"accountId"},onSuccess:function(e){var t=e.body;return{total:t.total,orders:t.results}},onFailure:n.onFailure},CANCEL_ORDER:{method:"DELETE",url:"https://trade-service.wealthsimple.com/orders/{0}",authenticated:!0,parameters:{0:"orderId"},onSuccess:n.onSuccess,onFailure:n.onFailure},PLACE_ORDER:{method:"POST",url:"https://trade-service.wealthsimple.com/orders",authenticated:!0,onSuccess:n.onSuccess,onFailure:n.onFailure}}},464:(e,t,r)=>{"use strict";r.d(t,{Z:()=>p});var n=r(156),o=r.n(n),s=r(690),i=r.n(s),a=r(728),u=r.n(a),c=r(687),l=r.n(c);const p=function(){function e(t){i()(this,e),this.worker=t}var t,r;return u()(e,[{key:"on",value:function(e,t){this.worker.on(e,t)}},{key:"use",value:function(e){this.worker.tokens.store(e)}},{key:"tokens",value:function(){return{access:this.worker.tokens.access,refresh:this.worker.tokens.refresh,expires:this.worker.tokens.expires}}},{key:"login",value:(r=o()(l().mark((function e(t,r){return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.login(t,r));case 1:case"end":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})},{key:"refresh",value:(t=o()(l().mark((function e(){return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.refreshAuthentication());case 1:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),e}()},500:(e,t,r)=>{"use strict";r.d(t,{Z:()=>i,e:()=>s});var n=["implicit_token_refresh","securities_cache"],o=["securities_cache"],s=function(e){return!o.includes(e)};function i(e){if(!function(e){return null!=e&&e.startsWith("no_")?n.includes(e.substring("no_".length)):n.includes(e)}(e))throw new Error("'".concat(e,"' is not supported!"));if(null!=e&&e.startsWith("no_")){var t=e.substring(e.indexOf("_")+1);s(t)&&o.push(t)}else s(e)||o.splice(o.indexOf(e),1)}},657:(e,t,r)=>{"use strict";r.d(t,{Z:()=>l});var n=r(424),o=r.n(n),s=r(690),i=r.n(s),a=r(728),u=r.n(a),c=["NASDAQ","NYSE","TSX","TSX-V","AEQUITAS NEO EXCHANGE","CC"];const l=function(){function e(t){var r;if(i()(this,e),this.symbol=null,this.exchange=null,this.id=null,this.crypto=!1,"string"==typeof t){if(""===t)throw new Error("Empty ticker");var n=t.split(":"),s=o()(n,2);this.symbol=s[0],this.exchange=s[1]}else{if(!t.symbol&&!t.id)throw new Error("Invalid ticker '".concat(t,"'"));this.symbol=t.symbol||null,this.exchange=t.exchange||null,this.id=t.id||null}if("NEO"===this.exchange&&(this.exchange="AEQUITAS NEO EXCHANGE"),this.exchange&&!c.includes(this.exchange))throw new Error("Invalid exchange '".concat(this.exchange,"'!"));("CC"===this.exchange||null!==(r=this.id)&&void 0!==r&&r.startsWith("sec-z"))&&(this.crypto=!0)}return u()(e,[{key:"format",value:function(){return this.id?this.id:"AEQUITAS NEO EXCHANGE"===this.exchange?"".concat(this.symbol,":NEO"):"".concat(this.symbol).concat(this.exchange?":".concat(this.exchange):"")}},{key:"weakEquals",value:function(e){return!(!this.id||this.id!==e.id)||!(!this.symbol||this.symbol!==e.symbol||this.crypto!==e.crypto)}}]),e}()},38:(e,t,r)=>{"use strict";r.d(t,{Z:()=>_});var n=r(416),o=r.n(n),s=r(424),i=r.n(s),a=r(156),u=r.n(a),c=r(690),l=r.n(c),p=r(728),h=r.n(p),f=r(687),d=r.n(f),y=r(726),v=r(657),m=r(500),w=new(function(){function e(t){l()(this,e),this.cache=new Map,this.size=t}return h()(e,[{key:"insert",value:function(e,t){this.cache.size>=this.size&&this.cache.delete(this.cache.keys().next().value),this.cache.set(e,t)}},{key:"get",value:function(e){return this.cache.get(e)}}]),e}())(10);const x=function(e){var t=w.get(new v.Z(e).format());return void 0===t?null:t};function k(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function b(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?k(Object(r),!0).forEach((function(t){o()(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):k(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}const _=function(){function e(t){l()(this,e),this.worker=t}var t,r,n,s;return h()(e,[{key:"exchangeRates",value:(s=u()(d().mark((function e(){return d().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(y.Z.EXCHANGE_RATES,{}));case 1:case"end":return e.stop()}}),e,this)}))),function(){return s.apply(this,arguments)})},{key:"getSecurity",value:(n=u()(d().mark((function e(t,r){var n,o,s,a;return d().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=null,o=new v.Z(t),r||!(0,m.e)("securities_cache")){e.next=6;break}if(!(n=x(o))){e.next=6;break}return e.abrupt("return",n);case 6:if(!o.id){e.next=12;break}return e.next=9,this.worker.handleRequest(y.Z.EXTENSIVE_SECURITY_DETAILS,{id:o.id});case 9:n=e.sent,e.next=28;break;case 12:return e.next=14,this.worker.handleRequest(y.Z.SECURITY,{ticker:o.symbol});case 14:if(n=(n=e.sent).filter((function(e){return e.stock.symbol===o.symbol})),o.crypto?n=n.filter((function(e){return"cryptocurrency"===e.security_type})):o.exchange&&(n=n.filter((function(e){return e.stock.primary_exchange===o.exchange}))),!(n.length>1)){e.next=19;break}throw new Error("Multiple securities matched query.");case 19:if(0!==n.length){e.next=21;break}throw new Error("No securities matched query.");case 21:if(s=n,a=i()(s,1),n=a[0],!r){e.next=28;break}return e.next=27,this.worker.handleRequest(y.Z.EXTENSIVE_SECURITY_DETAILS,{id:n.id});case 27:n=e.sent;case 28:return(0,m.e)("securities_cache")&&null===x(o)&&(u=o,c=n,w.insert(new v.Z(u).format(),c)),e.abrupt("return",n);case 30:case"end":return e.stop()}var u,c}),e,this)}))),function(e,t){return n.apply(this,arguments)})},{key:"securityGroups",value:(r=u()(d().mark((function e(){var t;return d().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.worker.handleRequest(y.Z.SECURITY_GROUPS,{});case 2:return t=e.sent,e.abrupt("return",t.reduce((function(e,t){return b(b({},e),{},o()({},t.name,t.external_security_group_id))}),{}));case 4:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"getSecurityGroup",value:(t=u()(d().mark((function e(t){var r,n;return d().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t,null!=t&&t.startsWith("security-group")){e.next=8;break}return e.next=4,this.securityGroups();case 4:if(n=e.sent,t in n){e.next=7;break}throw new Error("'".concat(t,"' is not a valid group name!"));case 7:r=n[t];case 8:return e.abrupt("return",this.worker.handleRequest(y.Z.SECURITY_GROUP,{groupId:r}));case 9:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),e}()},568:(e,t,r)=>{"use strict";r.d(t,{Z:()=>i});var n=r(861),o=r.n(n),s=new(r(338).Headers);const i={add:function(e,t){return s.append(e,t)},remove:function(e){return s.delete(e)},clear:function(){return o()(s).forEach((function(e){return s.delete(e[0])}))},values:function(){return o()(s)}}},352:(e,t,r)=>{r(957).install();var n=r(464).Z,o=r(568).Z,s=r(391).Z,i=r(764).Z,a=r(38).Z,u=r(889).Z,c=r(500).Z,l=r(190).Z,p=function(){var e=new l,t=new a(e);return{auth:new n(e),headers:o,accounts:new s(e),orders:new i(e,t),quotes:new u(e,t),data:t,config:c}},h=new p;h.Session=function(){return new p},e.exports=h},190:(e,t,r)=>{"use strict";r.d(t,{Z:()=>O});var n=r(424),o=r.n(n),s=r(156),i=r.n(s),a=r(690),u=r.n(a),c=r(728),l=r.n(c),p=r(416),h=r.n(p),f=r(687),d=r.n(f),y=r(607),v=r.n(y),m=r(568),w=r(726),x=r(500);var k=function(){function e(){u()(this,e),this.access=null,this.refresh=null,this.expires=null}return l()(e,[{key:"store",value:function(e){this.access=e.access,this.refresh=e.refresh,this.expires=e.expires}},{key:"expired",value:function(){return this.expires&&parseInt(Date.now()/1e3,10)>=this.expires}}]),e}();const b=k;function _(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}var g=200,E=201;function S(e,t){var r=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?_(Object(r),!0).forEach((function(t){h()(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):_(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},t),n=e.url;if(e.parameters)for(var o=0;o<Object.keys(e.parameters).length;o++){var s=e.parameters[o];if(null===r[s]||void 0===r[s])throw new Error("URL parameter '".concat(s,"' missing!"));if(n.indexOf("{".concat(o,"}"))>=0)n=n.replace("{".concat(o,"}"),r[e.parameters[o]]);else{if(!(n.indexOf("[".concat(o,"]"))>=0))throw new Error("Malformed URL! This is an internal error: raise an issue!");!function(){var t=e.parameters[o],s=r[t].map((function(e){return"".concat(t,"=").concat(e)})).join("&");n=n.replace("[".concat(o,"]"),s)}()}delete r[e.parameters[o]]}return["GET","HEAD"].includes(e.method)?{url:n,payload:void 0}:{url:n,payload:JSON.stringify(r)}}const O=function(){function e(){u()(this,e),this.tokens=new b,this.events={otp:null,refresh:null}}var t,r,n,s,a;return l()(e,[{key:"on",value:function(e,t){if(!(e in this.events))throw new Error("Unsupported authentication event '".concat(e,"'!"));this.events[e]=t}},{key:"talk",value:(a=i()(d().mark((function e(t,r){var n,s,i,a,u;return d().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n={"Content-type":"application/json"},!t.authenticated){e.next=8;break}if(this.tokens.access){e.next=4;break}throw new Error("Authentication required for '".concat(t.url,"'"));case 4:if(!(0,x.e)("implicit_token_refresh")){e.next=7;break}return e.next=7,this.implicitTokenRefresh();case 7:n.Authorization=this.tokens.access;case 8:return m.Z.values().forEach((function(e){var t=o()(e,2),r=t[0],s=t[1];n[r]=s})),s=S(t,r),i=s.url,a=s.payload,u=null,e.next=13,v()({url:i,body:a,method:t.method,headers:n,callback:function(e,t){u=t}}).catch((function(){}));case 13:try{u.body=JSON.parse(u.body)}catch(e){}return e.abrupt("return",u);case 15:case"end":return e.stop()}}),e,this)}))),function(e,t){return a.apply(this,arguments)})},{key:"handleRequest",value:(s=i()(d().mark((function e(t,r){var n;return d().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.talk(t,r);case 2:if(n=e.sent,![g,E].includes(n.statusCode)){e.next=5;break}return e.abrupt("return",t.onSuccess(n));case 5:return e.abrupt("return",Promise.reject(t.onFailure(n)));case 6:case"end":return e.stop()}}),e,this)}))),function(e,t){return s.apply(this,arguments)})},{key:"login",value:(n=i()(d().mark((function e(t,r){var n;return d().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=null,"function"!=typeof this.events.otp){e.next=4;break}return e.next=4,this.handleRequest(w.Z.LOGIN,{email:t,password:r}).catch((function(){}));case 4:if(e.prev=4,e.t0=this,e.t1=w.Z.LOGIN,e.t2=t,e.t3=r,"function"!=typeof this.events.otp){e.next=15;break}return e.next=12,this.events.otp();case 12:e.t4=e.sent,e.next=16;break;case 15:e.t4=this.events.otp;case 16:return e.t5=e.t4,e.t6={email:e.t2,password:e.t3,otp:e.t5},e.next=20,e.t0.handleRequest.call(e.t0,e.t1,e.t6);case 20:n=e.sent,e.next=29;break;case 23:if(e.prev=23,e.t7=e.catch(4),!(e.t7.headers&&e.t7.headers.indexOf("x-wealthsimple-otp-required")>-1)){e.next=28;break}throw new Error("Authentification successful but OTP is missing!");case 28:throw new Error("Wrong credentials or wrong OTP!");case 29:this.tokens.store(n.tokens);case 30:case"end":return e.stop()}}),e,this,[[4,23]])}))),function(e,t){return n.apply(this,arguments)})},{key:"refreshAuthentication",value:(r=i()(d().mark((function e(){var t;return d().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.handleRequest(w.Z.REFRESH,{refresh_token:this.tokens.refresh});case 2:if(t=e.sent,this.tokens.store(t.tokens),e.prev=4,"function"!=typeof this.events.refresh){e.next=8;break}return e.next=8,this.events.refresh(this.tokens);case 8:e.next=13;break;case 10:throw e.prev=10,e.t0=e.catch(4),new Error("Error in auth.on() handler for 'refresh': ".concat(e.t0));case 13:case"end":return e.stop()}}),e,this,[[4,10]])}))),function(){return r.apply(this,arguments)})},{key:"implicitTokenRefresh",value:(t=i()(d().mark((function e(){return d().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this.tokens.expired()){e.next=13;break}if(!this.tokens.refresh){e.next=12;break}return e.prev=2,e.next=5,this.refreshAuthentication();case 5:e.next=10;break;case 7:throw e.prev=7,e.t0=e.catch(2),new Error("Unable to refresh expired token: ".concat(e.t0));case 10:e.next=13;break;case 12:throw new Error("Access token expired");case 13:case"end":return e.stop()}}),e,this,[[2,7]])}))),function(){return t.apply(this,arguments)})}]),e}()},764:(e,t,r)=>{"use strict";r.d(t,{Z:()=>m});var n=r(861),o=r.n(n),s=r(156),i=r.n(s),a=r(690),u=r.n(a),c=r(728),l=r.n(c),p=r(687),h=r.n(p),f=r(726),d=r(657),y=function(e){return["TSX","TSX-V"].includes(e)};function v(e,t,r){var n=e.orders.filter((function(e){if(t){var n=new d.Z({symbol:e.symbol,id:e.security_id});if(!new d.Z(t).weakEquals(n))return!1}return e.status===r}));return{orders:n,total:n.length}}const m=function(){function e(t,r){u()(this,e),this.worker=t,this.data=r}var t,r,n,s,a,c,p,m,w,x,k,b,_,g;return l()(e,[{key:"page",value:(g=i()(h().mark((function e(t,r){return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.ORDERS_BY_PAGE,{offset:20*(r-1),accountId:t}));case 1:case"end":return e.stop()}}),e,this)}))),function(e,t){return g.apply(this,arguments)})},{key:"all",value:(_=i()(h().mark((function e(t){var r,n,s,i;return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.page(t,1);case 2:if(r=e.sent,!((n=Math.ceil(r.total/20))>1)){e.next=12;break}for(s=[],i=2;i<=n;i++)s.push(this.page(t,i).then((function(e){return e.orders})));return e.next=9,Promise.all(s);case 9:e.sent.forEach((function(e){var t;return(t=r.orders).push.apply(t,o()(e))})),r.total=r.orders.length;case 12:return e.abrupt("return",r);case 13:case"end":return e.stop()}}),e,this)}))),function(e){return _.apply(this,arguments)})},{key:"pending",value:(b=i()(h().mark((function e(t,r){var n;return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.all(t);case 2:return n=e.sent,e.abrupt("return",v(n,r,"submitted"));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return b.apply(this,arguments)})},{key:"filled",value:(k=i()(h().mark((function e(t,r){var n;return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.all(t);case 2:return n=e.sent,e.abrupt("return",v(n,r,"posted"));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return k.apply(this,arguments)})},{key:"cancelled",value:(x=i()(h().mark((function e(t,r){var n;return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.all(t);case 2:return n=e.sent,e.abrupt("return",v(n,r,"cancelled"));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return x.apply(this,arguments)})},{key:"cancel",value:(w=i()(h().mark((function e(t){return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=t,e.next=3,this.worker.handleRequest(f.Z.CANCEL_ORDER,{orderId:t});case 3:return e.t1=e.sent,e.abrupt("return",{order:e.t0,response:e.t1});case 5:case"end":return e.stop()}}),e,this)}))),function(e){return w.apply(this,arguments)})},{key:"cancelPending",value:(m=i()(h().mark((function e(t){var r,n=this;return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.pending(t);case 2:return r=e.sent,e.abrupt("return",Promise.all(r.orders.map(function(){var e=i()(h().mark((function e(t){return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",n.cancel(t.order_id));case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}())));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return m.apply(this,arguments)})},{key:"marketBuy",value:(p=i()(h().mark((function e(t,r,n){var o;return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.data.getSecurity(r,!0);case 2:return o=e.sent,e.abrupt("return",this.worker.handleRequest(f.Z.PLACE_ORDER,{security_id:o.id,limit_price:new d.Z(r).crypto?void 0:o.quote.amount,quantity:n,order_type:"buy_quantity",order_sub_type:"market",time_in_force:"day",account_id:t}));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t,r){return p.apply(this,arguments)})},{key:"fractionalBuy",value:(c=i()(h().mark((function e(t,r,n){return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=this.worker,e.t1=f.Z.PLACE_ORDER,e.next=4,this.data.getSecurity(r);case 4:return e.t2=e.sent.id,e.t3=n,e.t4=t,e.t5={security_id:e.t2,market_value:e.t3,order_type:"buy_value",order_sub_type:"fractional",time_in_force:"day",account_id:e.t4},e.abrupt("return",e.t0.handleRequest.call(e.t0,e.t1,e.t5));case 9:case"end":return e.stop()}}),e,this)}))),function(e,t,r){return c.apply(this,arguments)})},{key:"limitBuy",value:(a=i()(h().mark((function e(t,r,n,o){return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=this.worker,e.t1=f.Z.PLACE_ORDER,e.next=4,this.data.getSecurity(r);case 4:return e.t2=e.sent.id,e.t3=n,e.t4=o,e.t5=t,e.t6={security_id:e.t2,limit_price:e.t3,quantity:e.t4,order_type:"buy_quantity",order_sub_type:"limit",time_in_force:"day",account_id:e.t5},e.abrupt("return",e.t0.handleRequest.call(e.t0,e.t1,e.t6));case 10:case"end":return e.stop()}}),e,this)}))),function(e,t,r,n){return a.apply(this,arguments)})},{key:"stopLimitBuy",value:(s=i()(h().mark((function e(t,r,n,o,s){var i;return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.data.getSecurity(r);case 2:if(i=e.sent,!y(i.stock.primary_exchange)||n===o){e.next=5;break}throw new Error("TSX/TSX-V securities must have an equivalent stop and limit price.");case 5:return e.abrupt("return",this.worker.handleRequest(f.Z.PLACE_ORDER,{security_id:i.id,stop_price:n,limit_price:o,quantity:s,order_type:"buy_quantity",order_sub_type:"stop_limit",time_in_force:"day",account_id:t}));case 6:case"end":return e.stop()}}),e,this)}))),function(e,t,r,n,o){return s.apply(this,arguments)})},{key:"marketSell",value:(n=i()(h().mark((function e(t,r,n){var o;return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.data.getSecurity(r,!0);case 2:return o=e.sent,e.abrupt("return",this.worker.handleRequest(f.Z.PLACE_ORDER,{security_id:o.id,market_value:new d.Z(r).crypto?void 0:o.quote.amount,quantity:n,order_type:"sell_quantity",order_sub_type:"market",time_in_force:"day",account_id:t}));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t,r){return n.apply(this,arguments)})},{key:"limitSell",value:(r=i()(h().mark((function e(t,r,n,o){return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=this.worker,e.t1=f.Z.PLACE_ORDER,e.next=4,this.data.getSecurity(r);case 4:return e.t2=e.sent.id,e.t3=n,e.t4=o,e.t5=t,e.t6={security_id:e.t2,limit_price:e.t3,quantity:e.t4,order_type:"sell_quantity",order_sub_type:"limit",time_in_force:"day",account_id:e.t5},e.abrupt("return",e.t0.handleRequest.call(e.t0,e.t1,e.t6));case 10:case"end":return e.stop()}}),e,this)}))),function(e,t,n,o){return r.apply(this,arguments)})},{key:"stopLimitSell",value:(t=i()(h().mark((function e(t,r,n,o,s){var i;return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.data.getSecurity(r);case 2:if(i=e.sent,!y(i.stock.primary_exchange)||n===o){e.next=5;break}throw new Error("TSX/TSX-V securities must have an equivalent stop and limit price.");case 5:return e.abrupt("return",this.worker.handleRequest(f.Z.PLACE_ORDER,{security_id:i.id,stop_price:n,limit_price:o,quantity:s,order_type:"sell_quantity",order_sub_type:"stop_limit",time_in_force:"day",account_id:t}));case 6:case"end":return e.stop()}}),e,this)}))),function(e,r,n,o,s){return t.apply(this,arguments)})}]),e}()},889:(e,t,r)=>{"use strict";r.d(t,{Z:()=>d});var n=r(156),o=r.n(n),s=r(690),i=r.n(s),a=r(728),u=r.n(a),c=r(687),l=r.n(c);const p=function(e){return{quote:function(t){return o()(l().mark((function r(){var n;return l().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,e.getSecurity(t,!0);case 2:return n=r.sent,r.abrupt("return",n.quote.amount);case 4:case"end":return r.stop()}}),r)})))()}}};var h=r(657),f=r(726);const d=function(){function e(t,r){i()(this,e),this.defaultProvider=new p(r),this.providers={},this.worker=t,this.data=r}var t,r;return u()(e,[{key:"use",value:function(e,t){if("function"!=typeof t.quote)throw new Error("Invalid quote provider for ".concat(e,"!"));this.providers[e]=t}},{key:"get",value:(r=o()(l().mark((function e(t){var r,n,o;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=null,!(n=new h.Z(t)).exchange){e.next=6;break}r=n.exchange,e.next=15;break;case 6:if(!n.crypto||!n.id){e.next=10;break}r="CC",e.next=15;break;case 10:if(!(Object.keys(this.providers).length>0)){e.next=15;break}return e.next=13,this.data.getSecurity(n,!1);case 13:o=e.sent,r=o.stock.primary_exchange;case 15:if(!(r in this.providers)){e.next=17;break}return e.abrupt("return",this.providers[r].quote(n));case 17:return e.abrupt("return",this.defaultProvider.quote(n));case 18:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"history",value:(t=o()(l().mark((function e(t,r){var n;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if((n=new h.Z(t)).id){e.next=5;break}return e.next=4,this.data.getSecurity(n);case 4:n.id=e.sent.id;case 5:return e.abrupt("return",this.worker.handleRequest(f.Z.QUOTES_HISTORY,{id:n.id,interval:r}));case 6:case"end":return e.stop()}}),e,this)}))),function(e,r){return t.apply(this,arguments)})}]),e}()},607:e=>{"use strict";e.exports=r},338:e=>{"use strict";e.exports=t},957:t=>{"use strict";t.exports=e},897:e=>{e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n},e.exports.__esModule=!0,e.exports.default=e.exports},372:e=>{e.exports=function(e){if(Array.isArray(e))return e},e.exports.__esModule=!0,e.exports.default=e.exports},405:(e,t,r)=>{var n=r(897);e.exports=function(e){if(Array.isArray(e))return n(e)},e.exports.__esModule=!0,e.exports.default=e.exports},156:e=>{function t(e,t,r,n,o,s,i){try{var a=e[s](i),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}e.exports=function(e){return function(){var r=this,n=arguments;return new Promise((function(o,s){var i=e.apply(r,n);function a(e){t(i,o,s,a,u,"next",e)}function u(e){t(i,o,s,a,u,"throw",e)}a(void 0)}))}},e.exports.__esModule=!0,e.exports.default=e.exports},690:e=>{e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},e.exports.__esModule=!0,e.exports.default=e.exports},728:e=>{function t(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.exports=function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e},e.exports.__esModule=!0,e.exports.default=e.exports},416:e=>{e.exports=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},e.exports.__esModule=!0,e.exports.default=e.exports},498:e=>{e.exports=function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)},e.exports.__esModule=!0,e.exports.default=e.exports},872:e=>{e.exports=function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,s=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(n=r.next()).done)&&(s.push(n.value),!t||s.length!==t);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return s}},e.exports.__esModule=!0,e.exports.default=e.exports},218:e=>{e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.__esModule=!0,e.exports.default=e.exports},281:e=>{e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.__esModule=!0,e.exports.default=e.exports},61:(e,t,r)=>{var n=r(698).default;function o(){"use strict";e.exports=o=function(){return t},e.exports.__esModule=!0,e.exports.default=e.exports;var t={},r=Object.prototype,s=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function l(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,r){return e[t]=r}}function p(e,t,r,n){var o=t&&t.prototype instanceof d?t:d,s=Object.create(o.prototype),i=new O(n||[]);return s._invoke=function(e,t,r){var n="suspendedStart";return function(o,s){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw s;return{value:void 0,done:!0}}for(r.method=o,r.arg=s;;){var i=r.delegate;if(i){var a=g(i,r);if(a){if(a===f)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var u=h(e,t,r);if("normal"===u.type){if(n=r.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n="completed",r.method="throw",r.arg=u.arg)}}}(e,r,i),s}function h(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=p;var f={};function d(){}function y(){}function v(){}var m={};l(m,a,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(T([])));x&&x!==r&&s.call(x,a)&&(m=x);var k=v.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function r(o,i,a,u){var c=h(e[o],e,i);if("throw"!==c.type){var l=c.arg,p=l.value;return p&&"object"==n(p)&&s.call(p,"__await")?t.resolve(p.__await).then((function(e){r("next",e,a,u)}),(function(e){r("throw",e,a,u)})):t.resolve(p).then((function(e){l.value=e,a(l)}),(function(e){return r("throw",e,a,u)}))}u(c.arg)}var o;this._invoke=function(e,n){function s(){return new t((function(t,o){r(e,n,t,o)}))}return o=o?o.then(s,s):s()}}function g(e,t){var r=e.iterator[t.method];if(void 0===r){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,g(e,t),"throw"===t.method))return f;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var n=h(r,e.iterator,t.arg);if("throw"===n.type)return t.method="throw",t.arg=n.arg,t.delegate=null,f;var o=n.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function S(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function T(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,n=function t(){for(;++r<e.length;)if(s.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return n.next=n}}return{next:R}}function R(){return{value:void 0,done:!0}}return y.prototype=v,l(k,"constructor",v),l(v,"constructor",y),y.displayName=l(v,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,v):(e.__proto__=v,l(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},b(_.prototype),l(_.prototype,u,(function(){return this})),t.AsyncIterator=_,t.async=function(e,r,n,o,s){void 0===s&&(s=Promise);var i=new _(p(e,r,n,o),s);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(k),l(k,c,"Generator"),l(k,a,(function(){return this})),l(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=T,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!e)for(var t in this)"t"===t.charAt(0)&&s.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(r,n){return i.type="throw",i.arg=e,t.next=r,n&&(t.method="next",t.arg=void 0),!!n}for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n],i=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var a=s.call(o,"catchLoc"),u=s.call(o,"finallyLoc");if(a&&u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&s.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),S(r),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;S(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:T(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=void 0),f}},t}e.exports=o,e.exports.__esModule=!0,e.exports.default=e.exports},424:(e,t,r)=>{var n=r(372),o=r(872),s=r(116),i=r(218);e.exports=function(e,t){return n(e)||o(e,t)||s(e,t)||i()},e.exports.__esModule=!0,e.exports.default=e.exports},861:(e,t,r)=>{var n=r(405),o=r(498),s=r(116),i=r(281);e.exports=function(e){return n(e)||o(e)||s(e)||i()},e.exports.__esModule=!0,e.exports.default=e.exports},698:e=>{function t(r){return e.exports=t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,t(r)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports},116:(e,t,r)=>{var n=r(897);e.exports=function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}},e.exports.__esModule=!0,e.exports.default=e.exports},687:(e,t,r)=>{var n=r(61)();e.exports=n;try{regeneratorRuntime=n}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=n:Function("r","regeneratorRuntime = r")(n)}}},o={};function s(e){var t=o[e];if(void 0!==t)return t.exports;var r=o[e]={exports:{}};return n[e](r,r.exports,s),r.exports}return s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s(352)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,